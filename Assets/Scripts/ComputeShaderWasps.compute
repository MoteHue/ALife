#pragma kernel FunctionKernel

uint _Resolution;
uint _IndexStep;
float _Time;
uint _Counter;
uint _MicroruleCount;

// Buffers used for calculations.
RWStructuredBuffer<float> _AgentValues;
RWStructuredBuffer<float> _CellValues;
RWStructuredBuffer<float> _PastAgentValues;
RWStructuredBuffer<float> _PastCellValues;
StructuredBuffer<float3> _SpawnLocations;
RWStructuredBuffer<float> _Microrules;

uint GetIndexLocal(uint3 id, uint x, uint y, uint z) {
	return (id.x * _IndexStep + x) + (id.y * _IndexStep + y) * _Resolution + (id.z * _IndexStep + z) * _Resolution * _Resolution;
}

uint GetIndexGlobal(float3 pos) {
	return pos.x + pos.y * _Resolution + pos.z * _Resolution * _Resolution;
}

int RandInt(int min, int max, float2 seed) {
	float random = frac(sin(dot(seed, float2(12.9898, 78.233))) * 43758.5453123);
	int range = max - min;

	return min + floor(random * range);
}

float RandFloat(float min, float max, float2 seed) {
    float random = frac(sin(dot(seed, float2(12.9898, 78.233))) * 43758.5453123);
    int range = max - min;

    return min + random * range;
}

float2 GetSeed(uint3 id) {
	return float2(id.x + id.z * 4 + _Time, id.y + id.z * 4 + _Time);
}

void MakeMove(float3 currentPos, float3 newPos) {
	_AgentValues[GetIndexGlobal(newPos)]++;
	_AgentValues[GetIndexGlobal(currentPos)]--;
}

float3 CompleteLifeCycle(uint3 id, float3 currentPos) {
	uint numStructs;
	uint stride;
	_SpawnLocations.GetDimensions(numStructs, stride);

	float3 newPos = _SpawnLocations[RandInt(0, numStructs, GetSeed(id))];

	MakeMove(currentPos, newPos);
	return newPos;
}

bool CheckNeighbouringSurface(float3 pos) {
    for (int x = -1; x <= 1; x++) {
        if (pos.x + x >= 0 && pos.x + x < (float)_Resolution) {
            for (int y = -1; y <= 1; y++) {
                if (pos.y + y >= 0 && pos.y + y < (float)_Resolution) {
                    for (int z = -1; z <= 1; z++) {
                        if (pos.z + z >= 0 && pos.z + z < (float)_Resolution) {
                            if ((x != 0 || y != 0 || z != 0)) {
                                if (_PastCellValues[GetIndexGlobal(float3(pos.x + x, pos.y + y, pos.z + z))] != 0) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return false;
}

float3 TryMakeMove(uint3 id, float3 currentPos, float seedScalar) {
    float3 possibleMoves[26];

    uint counter = 0;

    for (int x = -1; x <= 1; x++) {    
        if (currentPos.x + x >= 0 && currentPos.x + x < (float)_Resolution) {
            for (int y = -1; y <= 1; y++) {
                if (currentPos.y + y >= 0 && currentPos.y + y < (float)_Resolution) {
                    for (int z = -1; z <= 1; z++) {
                        if (currentPos.z + z >= 0 && currentPos.z + z < (float)_Resolution) {
                            if ((x != 0 || y != 0 || z != 0)) {
                                if (CheckNeighbouringSurface(float3(currentPos.x + x, currentPos.y + y, currentPos.z + z))) {
                                    if (_PastCellValues[GetIndexGlobal(float3(currentPos.x + x, currentPos.y + y, currentPos.z + z))] == 0) {
                                        possibleMoves[counter] = float3(x, y, z);
                                        counter++;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    if (counter != 0) {
        float3 move = possibleMoves[RandInt(0, counter, GetSeed(id) + 2 * seedScalar + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z)];
        MakeMove(currentPos, currentPos + move);
        return currentPos + move;
    } else {
        float3 newPos = CompleteLifeCycle(id, currentPos);
        return newPos;
    }

}

void PlaceBlockAt(uint3 id, int x, int y, int z, int cellType) {
    _CellValues[GetIndexGlobal(float3(x, y, z))] = cellType;
    //CompleteLifeCycle(id, float3(x, y, z));
}

// Return the cell type if the microrule passes, or 0 if it doesn't.
int CheckMicrorule(int index, float3 pos, int rotation) {
    int counter = 0;
    float values[26];

    if (rotation == 0) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                for (int x = -1; x <= 1; x++) {
                    if (x != 0 || y != 0 || z != 0) {
                        if (pos.x + x >= 0 && pos.x + x < (float)_Resolution && pos.y + y >= 0 && pos.y + y < (float)_Resolution && pos.z + z >= 0 && pos.z + z < (float)_Resolution) {
                            values[counter] = _PastCellValues[GetIndexGlobal(float3(pos.x + x, pos.y + y, pos.z + z))];
                        } else {
                            values[counter] = 0;
                        }
                        counter++;
                    }
                }
            }
        }
    } else if (rotation == 1) {
        for (int y = -1; y <= 1; y++) {
            for (int x = 1; x >= -1; x--) {
                for (int z = -1; z <= 1; z++) {
                    if (x != 0 || y != 0 || z != 0) {
                        if (pos.x + x >= 0 && pos.x + x < (float)_Resolution && pos.y + y >= 0 && pos.y + y < (float)_Resolution && pos.z + z >= 0 && pos.z + z < (float)_Resolution) {
                            values[counter] = _PastCellValues[GetIndexGlobal(float3(pos.x + x, pos.y + y, pos.z + z))];
                        } else {
                            values[counter] = 0;
                        }
                        counter++;
                    }
                }
            }
        }
    } else if (rotation == 2) {
        for (int y = -1; y <= 1; y++) {
            for (int z = 1; z >= -1; z--) {
                for (int x = 1; x >= -1; x--) {
                    if (x != 0 || y != 0 || z != 0) {
                        if (pos.x + x >= 0 && pos.x + x < (float)_Resolution && pos.y + y >= 0 && pos.y + y < (float)_Resolution && pos.z + z >= 0 && pos.z + z < (float)_Resolution) {
                            values[counter] = _PastCellValues[GetIndexGlobal(float3(pos.x + x, pos.y + y, pos.z + z))];
                        } else {
                            values[counter] = 0;
                        }
                        counter++;
                    }
                }
            }
        }
    } else if (rotation == 3) {
        for (int y = -1; y <= 1; y++) {
            for (int x = -1; x <= 1; x++) {
                for (int z = 1; z >= -1; z--) {
                    if (x != 0 || y != 0 || z != 0) {
                        if (pos.x + x >= 0 && pos.x + x < (float)_Resolution && pos.y + y >= 0 && pos.y + y < (float)_Resolution && pos.z + z >= 0 && pos.z + z < (float)_Resolution) {
                            values[counter] = _PastCellValues[GetIndexGlobal(float3(pos.x + x, pos.y + y, pos.z + z))];
                        } else {
                            values[counter] = 0;
                        }
                        counter++;
                    }
                }
            }
        }
    }
    
    for (int i = 0; i < 26; i++) {
        if (values[i] != _Microrules[(index * 27) + i]) {
            return 0;
        }
    }

    return _Microrules[(index * 27) + 26];
}

// Return the cell type of the microrule that passes, or 0 if no rules pass.
int CheckMicrorules(float3 pos) {
    for (uint i = 0; i < _MicroruleCount; i++) {
        for (int rot = 0; rot < 4; rot++) {
            int microrule = CheckMicrorule(i, pos, rot);
            if (microrule != 0) {
                return microrule;
            }
        }
    }
    return 0;
}


bool TryPlaceBlock(uint3 id, float3 currentPos) {
    int microrule = CheckMicrorules(currentPos);
    if (microrule != 0) {
        PlaceBlockAt(id, currentPos.x, currentPos.y, currentPos.z, microrule);
        return true;
    } else {
        return false;
    }
}

void AgentStepThroughTime(uint3 id) {
    float3 positions[1000];
    int counter = 0;

    for (uint x = 0; x < _IndexStep; x++) {
        for (uint y = 0; y < _IndexStep; y++) {
            for (uint z = 0; z < _IndexStep; z++) {
                for (uint i = 0; i < (uint)_PastAgentValues[GetIndexLocal(id, x, y, z)]; i++) {
                    positions[counter] = TryMakeMove(id, float3(id.x * _IndexStep + x, id.y * _IndexStep + y, id.z * _IndexStep + z), i);
                    counter++;
                }
            }
        }
    }

    for (int i = 0; i < counter; i++) {
        TryPlaceBlock(id, positions[i]);
    }
}

[numthreads(2, 2, 2)]
void FunctionKernel(uint3 id: SV_DispatchThreadID) {
    
    if (_Counter == 0 && id.x == 0 && id.y == 0 && id.z == 0) {
        _CellValues[GetIndexGlobal(float3(30, 29, 30))] = 1;

        _AgentValues[GetIndexGlobal(float3(30, 28, 30))] = 20;
    }

    if (_Counter == 1 && id.x == 0 && id.y == 0 && id.z == 0) {
        //TryPlaceBlock(id, float3(15, 58, 15));
    }

    if (_Counter > 0) {
        AgentStepThroughTime(id);
    }


}

