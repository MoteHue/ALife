#pragma kernel FunctionKernel

RWStructuredBuffer<float3> _Positions;
uint _Resolution;
float _Step;
float _Time;
uint _IndexStep;

uint _Count;

uint GetIndex(uint3 id) {
	return id.x + id.y * 4 + id.z * 16;
}

[numthreads(2, 2, 2)]
void FunctionKernel(uint3 id: SV_DispatchThreadID) {
	uint index = GetIndex(id);

	for (uint x = 0; x < _IndexStep; x++) {
		for (uint y = 0; y < _IndexStep; y++) {
			for (uint z = 0; z < _IndexStep; z++) {
				float3 p;
				p.x = id.x * _IndexStep + x;
				p.y = id.y * _IndexStep + y;
				p.z = id.z * _IndexStep + z;
				if ((uint)p.x < _Resolution && (uint)p.y < _Resolution && (uint)p.z < _Resolution) {
					_Positions[index * (_IndexStep * _IndexStep * _IndexStep) + x + y * _IndexStep + z * _IndexStep * _IndexStep] = p;
				}
				else {
					_Positions[index * (_IndexStep * _IndexStep * _IndexStep) + x + y * _IndexStep + z * _IndexStep * _IndexStep] = float3(-100, -100, -100);
				}
			}
		}
	}
}

