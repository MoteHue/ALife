#pragma kernel FunctionKernel

#define maxResolution 64

uint _Resolution;
uint _IndexStep;
float _Time;

// Buffers used for calculations.
RWStructuredBuffer<float4> _AgentValues;
RWStructuredBuffer<float4> _CellValues;
RWStructuredBuffer<float4> _PheromoneValues;
RWStructuredBuffer<float3> _SpawnLocations;

float placementProbability = 0.1;
float alpha = 1 / 7;
float decay = 0.9;

uint GetIndexLocal(uint3 id, uint x, uint y, uint z) {
	return (id.x * _IndexStep + x) + (id.y * _IndexStep + y) * _Resolution + (id.z * _IndexStep + z) * _Resolution * _Resolution;
}

uint GetIndexGlobal(float3 pos) {
	return pos.x + pos.y * _Resolution + pos.z * _Resolution * _Resolution;
}

void FillEntireGridDebugFunction(uint3 id) {
	for (uint x = 0; x < _IndexStep; x++) {
		for (uint y = 0; y < _IndexStep; y++) {
			for (uint z = 0; z < _IndexStep; z++) {
				float3 p;
				p.x = id.x * _IndexStep + x;
				p.y = id.y * _IndexStep + y;
				p.z = id.z * _IndexStep + z;
				if ((uint)p.x < _Resolution && (uint)p.y < _Resolution && (uint)p.z < _Resolution) {
					//if (_AgentValues[GetIndexLocal(id, x, y, z)].w > 0) {
						_PheromoneValues[GetIndexLocal(id, x, y, z)] = float4 (p.x, p.y, p.z, 1);
					//}
				}
			}
		}
	}
}

int Rand(int min, int max, float2 seed) {
	float random = frac(sin(dot(seed, float2(12.9898, 78.233))) * 43758.5453123);
	int range = max - min;

	return min + floor(random * range);
}

float2 GetSeed(uint3 id) {
	return float2(id.x + id.z * 4 + _Time, id.y + id.z * 4 + _Time);
}

void MakeMove(float3 currentPos, float3 newPos) {
	_AgentValues[GetIndexGlobal(newPos)].w++;
	_AgentValues[GetIndexGlobal(currentPos)].w--;
}

float3 CompleteLifeCycle(uint3 id, float3 currentPos) {
	uint numStructs;
	uint stride;
	_SpawnLocations.GetDimensions(numStructs, stride);

	float3 newPos = _SpawnLocations[Rand(0, numStructs, GetSeed(id))];

	MakeMove(currentPos, newPos);
	return newPos;
}

[numthreads(2, 2, 2)]
void FunctionKernel(uint3 id: SV_DispatchThreadID) {

	//FillEntireGridDebugFunction(id);

}

