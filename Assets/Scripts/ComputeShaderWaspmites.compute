#pragma kernel FunctionKernel

uint _Resolution;
uint _IndexStep;
float _Time;
uint _Counter;
uint _MicroruleCount;

// Buffers used for calculations.
RWStructuredBuffer<float2> _AgentValues;
RWStructuredBuffer<float> _CellValues;
RWStructuredBuffer<float3> _PheromoneValues; // x = Queen, y = Cement, z = Trail
RWStructuredBuffer<float2> _PastAgentValues;
RWStructuredBuffer<float> _PastCellValues;
RWStructuredBuffer<float3> _PastPheromoneValues;
StructuredBuffer<float3> _SpawnLocations;
RWStructuredBuffer<float> _Microrules;

uint GetIndexLocal(uint3 id, uint x, uint y, uint z) {
	return (id.x * _IndexStep + x) + (id.y * _IndexStep + y) * _Resolution + (id.z * _IndexStep + z) * _Resolution * _Resolution;
}

uint GetIndexGlobal(float3 pos) {
	return pos.x + pos.y * _Resolution + pos.z * _Resolution * _Resolution;
}

int RandInt(int min, int max, float2 seed) {
	float random = frac(sin(dot(seed, float2(12.9898, 78.233))) * 43758.5453123);
	int range = max - min;

	return min + floor(random * range);
}

float RandFloat(float min, float max, float2 seed) {
    float random = frac(sin(dot(seed, float2(12.9898, 78.233))) * 43758.5453123);
    int range = max - min;

    return min + random * range;
}

float2 GetSeed(uint3 id) {
	return float2(id.x + id.z * 4 + _Time, id.y + id.z * 4 + _Time);
}

void MakeMove(float3 currentPos, float3 newPos) {
	_AgentValues[GetIndexGlobal(newPos)].x++;
	_AgentValues[GetIndexGlobal(currentPos)].x--;
}

void MakeMoveTrail(float3 currentPos, float3 newPos) {
    _AgentValues[GetIndexGlobal(newPos)].y++;
    _AgentValues[GetIndexGlobal(currentPos)].y--;
}

float3 CompleteLifeCycle(uint3 id, float3 currentPos) {
	uint numStructs;
	uint stride;
	_SpawnLocations.GetDimensions(numStructs, stride);

	float3 newPos = _SpawnLocations[RandInt(0, numStructs, GetSeed(id))];

	MakeMove(currentPos, newPos);
	return newPos;
}

float3 CompleteLifeCycleTrail(uint3 id, float3 currentPos) {
    float3 trailSpawnLocations[12] = { /*float3(27,0,0), float3(28,0,0), float3(29,0,0), float3(30,0,0), float3(31,0,0), float3(32,0,0),
                                       float3(27,0,59), float3(28,0,59), float3(29,0,59), float3(30,0,59), float3(31,0,59), float3(32,0,59),*/
                                       float3(0,0,27), float3(0,0,28), float3(0,0,29), float3(0,0,30), float3(0,0,31), float3(0,0,32),
                                       float3(59,0,27), float3(59,0,28), float3(59,0,29), float3(59,0,30), float3(59,0,31), float3(59,0,32) };

    float3 newPos = trailSpawnLocations[RandInt(0, 11, GetSeed(id))];

    MakeMoveTrail(currentPos, newPos);
    return newPos;
}

bool CheckNoObstructions(float3 currentPos, float3 move) {
    int axisCount = 0;
    if (move.x != 0) axisCount++;
    if (move.y != 0) axisCount++;
    if (move.z != 0) axisCount++;

    if (_PastCellValues[GetIndexGlobal(float3(currentPos.x + move.x, currentPos.y + move.y, currentPos.z + move.z))] == 0) {
        if (axisCount == 3) { // Check for movement through wall diagonals
            if (_PastCellValues[GetIndexGlobal(float3(currentPos.x + move.x, currentPos.y, currentPos.z))] == 0 || _PastCellValues[GetIndexGlobal(float3(currentPos.x, currentPos.y + move.y, currentPos.z))] == 0 || _PastCellValues[GetIndexGlobal(float3(currentPos.x, currentPos.y, currentPos.z + move.z))] == 0) {
                return true;
            } else {
                return false;
            }
        } else if (axisCount == 2) {
            if (move.x != 0 && move.y != 0) {
                if (_PastCellValues[GetIndexGlobal(float3(currentPos.x + move.x, currentPos.y, currentPos.z))] == 0 || _PastCellValues[GetIndexGlobal(float3(currentPos.x, currentPos.y + move.y, currentPos.z))] == 0) {
                    return true;
                } else {
                    return false;
                }
            } else if (move.x != 0 && move.z != 0) {
                if (_PastCellValues[GetIndexGlobal(float3(currentPos.x + move.x, currentPos.y, currentPos.z))] == 0 || _PastCellValues[GetIndexGlobal(float3(currentPos.x, currentPos.y, currentPos.z + move.z))] == 0) {
                    return true;
                } else {
                    return false;
                }
            } else if (move.y != 0 && move.z != 0) {
                if (_PastCellValues[GetIndexGlobal(float3(currentPos.x, currentPos.y + move.y, currentPos.z))] == 0 || _PastCellValues[GetIndexGlobal(float3(currentPos.x, currentPos.y, currentPos.z + move.z))] == 0) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return true;
        }
    } else {
        return false;
    }
}

bool CheckNeighbouringSurface(uint x, uint y, uint z) {
    if (y == 0) return true;

    if (x != 0) {
        if (_PastCellValues[GetIndexGlobal(float3(x - 1, y, z))] != 0) {
            return true;
        }
    }
    if (y != 0) {
        if (_PastCellValues[GetIndexGlobal(float3(x, y - 1, z))] != 0) {
            return true;
        }
    }
    if (z != 0) {
        if (_PastCellValues[GetIndexGlobal(float3(x, y, z - 1))] != 0) {
            return true;
        }
    }
    if (x != _Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(x + 1, y, z))] != 0) {
            return true;
        }
    }
    if (y != _Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(x, y + 1, z))] != 0) {
            return true;
        }
    }
    if (z != _Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(x, y, z + 1))] != 0) {
            return true;
        }
    }
    return false;
}

float3 TryMakeMove(uint3 id, float3 currentPos, float seedScalar) {
    float3 possibleMoves[26];

    uint counter = 0;

    for (int x = -1; x <= 1; x++) {    
        //if (pos.x + x >= 0 && pos.x + x < gridUI.width) {
        for (int y = -1; y <= 1; y++) {
            if (currentPos.y + y >= 0 && currentPos.y + y < (float)_Resolution) { // Can't move out of grid vertically
                for (int z = -1; z <= 1; z++) {
                    //if (pos.z + z >= 0 && pos.z + z < gridUI.depth) {
                    if ((x != 0 || y != 0 || z != 0)) {
                        if (currentPos.x + x < 0 || currentPos.x + x >= (float)_Resolution || currentPos.z + z < 0 || currentPos.z + z >= (float)_Resolution) { // Moving out of grid
                            possibleMoves[counter] = float3(x, y, z);
                            counter++;
                        } else if (CheckNoObstructions(currentPos, float3(x, y, z)) && CheckNeighbouringSurface(currentPos.x + x, currentPos.y + y, currentPos.z + z)) { // Moving within grid
                            possibleMoves[counter] = float3 (x, y, z);
                            counter++;
                        }
                    }
                    //}
                }
            }
        }
        //}
    }

    if (counter != 0) {
        float3 move;
        float cementSum = 0;

        for (uint i = 0; i < counter; i++) {
            float cementValue = _PastPheromoneValues[GetIndexGlobal(currentPos + possibleMoves[i])].y;
            cementSum += cementValue;
        }

        if (cementSum == 0) {
            float3 movesTowardsCentre[26];
            uint counter2 = 0;
            for (uint i = 0; i < counter; i++) {
                if ((currentPos.x < 30 && possibleMoves[i].x == 1)
                    || (currentPos.x > 30 && possibleMoves[i].x == -1)
                    || (currentPos.z < 30 && possibleMoves[i].z == 1)
                    || (currentPos.z > 30 && possibleMoves[i].z == -1)) {
                    movesTowardsCentre[counter2] = possibleMoves[i];
                    counter2++;
                }
            }
            if (counter2 > 0) {
                float centreChance = RandFloat(0, 100, GetSeed(id) + 2 * seedScalar + currentPos.x + currentPos.y + currentPos.z);
                if (centreChance < 20.0) {
                    move = movesTowardsCentre[RandInt(0, counter2, GetSeed(id) + 2 * seedScalar + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z)];
                } else {
                    move = possibleMoves[RandInt(0, counter, GetSeed(id) + 2 * seedScalar + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z)];
                }
            } else {
                move = possibleMoves[RandInt(0, counter, GetSeed(id) + 2 * seedScalar + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z)];
            }
        }
        else {
            float proportions[26];
            for (uint j = 0; j < counter; j++) {
                float cementValue = _PastPheromoneValues[GetIndexGlobal(currentPos + possibleMoves[j])].y;
                proportions[j] = (cementValue / cementSum) * 100;
            }

            float moveChoice = RandFloat(0, 100, GetSeed(id) + 2 * seedScalar + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z);
            float sum = 0;

            for (uint k = 0; k < counter; k++) {
                if (sum + proportions[k] > moveChoice) {
                    float chooseCement = RandFloat(0, 100, GetSeed(id) + 2 * seedScalar + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z + 7.3 * moveChoice);
                    if ((1.0 / _PastPheromoneValues[GetIndexGlobal(currentPos + possibleMoves[k])].y) * 100 < chooseCement) {
                        move = possibleMoves[k];
                    }
                    else {
                        move = possibleMoves[RandInt(0, counter, GetSeed(id) + 2 * seedScalar + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z)];
                    }
                    break;
                }
                else {
                    sum += proportions[k];
                }
            }
        }   

        if (currentPos.x + move.x < 0 || currentPos.x + move.x >= (float)_Resolution || currentPos.z + move.z < 0 || currentPos.z + move.z >= (float)_Resolution) { // Moving out of grid
            float3 newPos = CompleteLifeCycle(id, currentPos);
            return newPos;
        }
        else { // Moving within grid
            MakeMove(currentPos, currentPos + move);
            return currentPos + move;
        }
    } else {
        float3 newPos = CompleteLifeCycle(id, currentPos);
        return newPos;
    }
}

float3 TryMakeMoveTrail(uint3 id, float3 currentPos, float seedScalar) {
    float3 possibleMoves[26];

    uint counter = 0;

    for (int x = -1; x <= 1; x++) {
        //if (pos.x + x >= 0 && pos.x + x < gridUI.width) {
        for (int y = -1; y <= 1; y++) {
            if (currentPos.y + y >= 0 && currentPos.y + y < (float)_Resolution) { // Can't move out of grid vertically
                for (int z = -1; z <= 1; z++) {
                    //if (pos.z + z >= 0 && pos.z + z < gridUI.depth) {
                    if ((x != 0 || y != 0 || z != 0)) {
                        if ((currentPos.x < 30 && x == 1)
                            || (currentPos.x > 30 && x == -1)
                            || (currentPos.z < 30 && z == 1)
                            || (currentPos.z > 30 && z == -1)) { // Move towards centre {
                            if (currentPos.x + x < 0 || currentPos.x + x >= (float)_Resolution || currentPos.z + z < 0 || currentPos.z + z >= (float)_Resolution) { // Moving out of grid
                                possibleMoves[counter] = float3(x, y, z);
                                counter++;
                            } else if (CheckNoObstructions(currentPos, float3(x, y, z)) && CheckNeighbouringSurface(currentPos.x + x, currentPos.y + y, currentPos.z + z)) { // Moving within grid
                                possibleMoves[counter] = float3 (x, y, z);
                                counter++;
                            }
                        }
                    }
                    //}
                }
            }
        }
        //}
    }

    if (counter != 0) {
        float3 move;
        float trailSum = 0;

        for (uint i = 0; i < counter; i++) {
            float trailValue = _PastPheromoneValues[GetIndexGlobal(currentPos + possibleMoves[i])].z;
            trailSum += trailValue;
        }

        if (trailSum != 0) {
            float proportions[26];
            for (uint j = 0; j < counter; j++) {
                float trailValue = _PastPheromoneValues[GetIndexGlobal(currentPos + possibleMoves[j])].z;
                proportions[j] = (trailValue / trailSum) * 100;
            }

            float moveChoice = RandFloat(0, 100, GetSeed(id) + 2 * seedScalar + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z);
            float sum = 0;

            for (uint k = 0; k < counter; k++) {
                if (sum + proportions[k] > moveChoice) {
                    float chooseTrail = RandFloat(0, 100, GetSeed(id) + 2 * seedScalar + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z + 7.3 * moveChoice);
                    if ((1.0 / _PastPheromoneValues[GetIndexGlobal(currentPos + possibleMoves[k])].z) * 100 < chooseTrail) {
                        move = possibleMoves[k];
                    } else {
                        move = possibleMoves[RandInt(0, counter, GetSeed(id) + 2 * seedScalar + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z)];
                    }
                    break;
                } else {
                    sum += proportions[k];
                }
            }
        }

        if (currentPos.x + move.x < 0 || currentPos.x + move.x >= (float)_Resolution || currentPos.z + move.z < 0 || currentPos.z + move.z >= (float)_Resolution) { // Moving out of grid
            float3 newPos = CompleteLifeCycleTrail(id, currentPos);
            return newPos;
        } else { // Moving within grid
            float3 newPos = currentPos + move;
            if (newPos.x >= 28 && newPos.x <= 32 && newPos.z >= 28 && newPos.z <= 32) {
                newPos = CompleteLifeCycleTrail(id, currentPos);
            } else {
                MakeMoveTrail(currentPos, newPos);
            }
            return newPos;
        }
    } else {
        float3 newPos = CompleteLifeCycleTrail(id, currentPos);
        return newPos;
    }
}

void PlaceBlockAt(uint3 id, int x, int y, int z, int cellType) {
    _CellValues[GetIndexGlobal(float3(x, y, z))] = cellType;
    _PheromoneValues[GetIndexGlobal(float3(x, y, z))].y = 1600;
    CompleteLifeCycle(id, float3(x, y, z));
}

// 1. Either the location immediately underneath or immediately above the site must contain material.
// The floor, represented by y == -1, counts as material.
bool Rule1(int x, int y, int z) {
    if (y == 0) {
        return true;
    }
    if (y > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(x, y - 1, z))] != 0) {
            return true;
        }
    }
    if (y < (float) _Resolution - 2) {
        if (_PastCellValues[GetIndexGlobal(float3(x, y + 1, z))] != 0) {
            return true;
        }
    }
    return false;
}


// 2. The site must share a face with a horizontally adjacent location that contains material and satisfies (1).
bool Rule2(int x, int y, int z) {
    if (x < (float) _Resolution - 2) {
        if (_PastCellValues[GetIndexGlobal(float3(x + 1, y, z))] != 0 && Rule1(x + 1, y, z)) {
            return true;
        }
    }
    if (x > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(x - 1, y, z))] != 0 && Rule1(x - 1, y, z)) {
            return true;
        }
    }
    if (z < (float) _Resolution - 2) {
        if (_PastCellValues[GetIndexGlobal(float3(x, y, z + 1))] != 0 && Rule1(x, y, z + 1)) {
            return true;
        }
    }
    if (z > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(x, y, z - 1))] != 0 && Rule1(x, y, z - 1)) {
            return true;
        }
    }
    return false;
}

// 3. One face of the site must neighbour three horizontally adjacent locations that each contain material.
bool Rule3(int x, int y, int z) {
    if (x < (float) _Resolution - 2 && z > 0 && z < (float) _Resolution - 2) {
        if (_PastCellValues[GetIndexGlobal(float3(x + 1, y, z - 1))] != 0 && _PastCellValues[GetIndexGlobal(float3(x + 1, y, z))] != 0 && _PastCellValues[GetIndexGlobal(float3(x + 1, y, z + 1))] != 0) {
            return true;
        }
    }
    if (x > 0 && z > 0 && z < (float) _Resolution - 2) {
        if (_PastCellValues[GetIndexGlobal(float3(x - 1, y, z - 1))] != 0 && _PastCellValues[GetIndexGlobal(float3(x - 1, y, z))] != 0 && _PastCellValues[GetIndexGlobal(float3(x - 1, y, z + 1))] != 0) {
            return true;
        }
    }
    if (z < (float) _Resolution - 2 && x > 0 && x < (float) _Resolution - 2) {
        if (_PastCellValues[GetIndexGlobal(float3(x - 1, y, z + 1))] != 0 && _PastCellValues[GetIndexGlobal(float3(x, y, z + 1))] != 0 && _PastCellValues[GetIndexGlobal(float3(x + 1, y, z + 1))] != 0) {
            return true;
        }
    }
    if (z > 0 && x > 0 && x < (float) _Resolution - 2) {
        if (_PastCellValues[GetIndexGlobal(float3(x - 1, y, z - 1))] != 0 && _PastCellValues[GetIndexGlobal(float3(x, y, z - 1))] != 0 && _PastCellValues[GetIndexGlobal(float3(x + 1, y, z - 1))] != 0) {
            return true;
        }
    }
    return false;
}

// Return the cell type if the microrule passes, or 0 if it doesn't.
int CheckMicrorule(int index, float3 pos, int rotation) {
    int counter = 0;
    float values[26];

    if (((_PastPheromoneValues[GetIndexGlobal(pos)].x < _Microrules[(index * 32) + 28]) || (_PastPheromoneValues[GetIndexGlobal(pos)].x > _Microrules[(index * 32) + 29])) && ((_PastPheromoneValues[GetIndexGlobal(pos)].z < _Microrules[(index * 32) + 30]) || (_PastPheromoneValues[GetIndexGlobal(pos)].z > _Microrules[(index * 32) + 31]))) {
        return 0;
    }

    if (rotation == 0) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                for (int x = -1; x <= 1; x++) {
                    if (x != 0 || y != 0 || z != 0) {
                        if (pos.x + x >= 0 && pos.x + x < (float)_Resolution && pos.y + y >= 0 && pos.y + y < (float)_Resolution && pos.z + z >= 0 && pos.z + z < (float)_Resolution) {
                            values[counter] = _PastCellValues[GetIndexGlobal(float3(pos.x + x, pos.y + y, pos.z + z))];
                        } else {
                            if (pos.y + y == -1) {
                                values[counter] = 1;
                            } else {
                                values[counter] = 0;
                            }
                        }
                        counter++;
                    }
                }
            }
        }
    } else if (rotation == 1) {
        for (int y = -1; y <= 1; y++) {
            for (int x = 1; x >= -1; x--) {
                for (int z = -1; z <= 1; z++) {
                    if (x != 0 || y != 0 || z != 0) {
                        if (pos.x + x >= 0 && pos.x + x < (float)_Resolution && pos.y + y >= 0 && pos.y + y < (float)_Resolution && pos.z + z >= 0 && pos.z + z < (float)_Resolution) {
                            values[counter] = _PastCellValues[GetIndexGlobal(float3(pos.x + x, pos.y + y, pos.z + z))];
                        } else {
                            if (pos.y + y == -1) {
                                values[counter] = 1;
                            } else {
                                values[counter] = 0;
                            }
                        }
                        counter++;
                    }
                }
            }
        }
    } else if (rotation == 2) {
        for (int y = -1; y <= 1; y++) {
            for (int z = 1; z >= -1; z--) {
                for (int x = 1; x >= -1; x--) {
                    if (x != 0 || y != 0 || z != 0) {
                        if (pos.x + x >= 0 && pos.x + x < (float)_Resolution && pos.y + y >= 0 && pos.y + y < (float)_Resolution && pos.z + z >= 0 && pos.z + z < (float)_Resolution) {
                            values[counter] = _PastCellValues[GetIndexGlobal(float3(pos.x + x, pos.y + y, pos.z + z))];
                        } else {
                            if (pos.y + y == -1) {
                                values[counter] = 1;
                            } else {
                                values[counter] = 0;
                            }
                        }
                        counter++;
                    }
                }
            }
        }
    } else if (rotation == 3) {
        for (int y = -1; y <= 1; y++) {
            for (int x = -1; x <= 1; x++) {
                for (int z = 1; z >= -1; z--) {
                    if (x != 0 || y != 0 || z != 0) {
                        if (pos.x + x >= 0 && pos.x + x < (float)_Resolution && pos.y + y >= 0 && pos.y + y < (float)_Resolution && pos.z + z >= 0 && pos.z + z < (float)_Resolution) {
                            values[counter] = _PastCellValues[GetIndexGlobal(float3(pos.x + x, pos.y + y, pos.z + z))];
                        } else {
                            if (pos.y + y == -1) {
                                values[counter] = 1;
                            } else {
                                values[counter] = 0;
                            }
                        }
                        counter++;
                    }
                }
            }
        }
    }

    for (int i = 0; i < 26; i++) {
        if ((values[i] != _Microrules[(index * 32) + i]) && _Microrules[(index * 32) + i] != 100) {
            return 0;
        }
    }

    return _Microrules[(index * 32) + 26];
}

// Return the cell type of the microrule that passes, or 0 if no rules pass.
int CheckMicrorules(float3 pos) {
    for (uint i = 0; i < _MicroruleCount; i++) {
        for (int rot = 0; rot < 4; rot++) {
            int microrule = CheckMicrorule(i, pos, rot);
            if (microrule != 0) {
                _Microrules[(i * 32) + 27] = 1;
                return microrule;
            }
        }
    }
    return 0;
}

bool TryPlaceBlock(uint3 id, float3 currentPos) {
    if (RandInt(0, 100, GetSeed(id) + 4.5 * currentPos.x + 3.7 * currentPos.y + 1.2 * currentPos.z) <= 10) {
        if (Rule1(currentPos.x, currentPos.y, currentPos.z) || Rule2(currentPos.x, currentPos.y, currentPos.z) || Rule3(currentPos.x, currentPos.y, currentPos.z)) {
            int microrule = CheckMicrorules(currentPos);
            if (microrule != 0) {
                PlaceBlockAt(id, currentPos.x, currentPos.y, currentPos.z, microrule);
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    } else {
        return false;
    }
}

// Diffuses pheromone from neighbouring cells. If there is a block in the neighbouring cell, the diffusion value is instead sent back. Edges of the grid are considered to be empty of pheromone.
float CalcDiffusionFromNeighboursQueen(float3 pos) {
    float sum = 0.0;
    float value = _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z))].x;
    float alpha = 1.0 / 7.0;

    if (pos.x > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x - 1, pos.y, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x - 1, pos.y, pos.z))].x);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x - 1, pos.y, pos.z))].x;
        }
    } else {
        sum += -alpha * value;
    }
    if (pos.x < (float) _Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x + 1, pos.y, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x + 1, pos.y, pos.z))].x);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x + 1, pos.y, pos.z))].x;
        }
    } else {
        sum += -alpha * value;
    }
    if (pos.y > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y - 1, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y - 1, pos.z))].x);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y - 1, pos.z))].x;
        }
    } // Note there is no else as the floor is considered to be made of blocks.
    if (pos.y < (float) _Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y + 1, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y + 1, pos.z))].x);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y + 1, pos.z))].x;
        }
    } else {
        sum += -alpha * value;
    }
    if (pos.z > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z - 1))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z - 1))].x);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z - 1))].x;
        }
    } else {
        sum += -alpha * value;
    }
    if (pos.z < (float) _Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z + 1))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z + 1))].x);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z + 1))].x;
        }
    } else {
        sum += -alpha * value;
    }

    return sum;
}

float CalcDiffusionFromNeighboursTrail(float3 pos) {
    float sum = 0.0;
    float value = _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z))].z;
    float alpha = 1.0 / 7.0;

    if (pos.x > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x - 1, pos.y, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x - 1, pos.y, pos.z))].z);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x - 1, pos.y, pos.z))].z;
        }
    } else {
        sum += -alpha * value;
    }
    if (pos.x < (float)_Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x + 1, pos.y, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x + 1, pos.y, pos.z))].z);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x + 1, pos.y, pos.z))].z;
        }
    } else {
        sum += -alpha * value;
    }
    if (pos.y > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y - 1, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y - 1, pos.z))].z);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y - 1, pos.z))].z;
        }
    } // Note there is no else as the floor is considered to be made of blocks.
    if (pos.y < (float)_Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y + 1, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y + 1, pos.z))].z);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y + 1, pos.z))].z;
        }
    } else {
        sum += -alpha * value;
    }
    if (pos.z > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z - 1))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z - 1))].z);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z - 1))].z;
        }
    } else {
        sum += -alpha * value;
    }
    if (pos.z < (float)_Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z + 1))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z + 1))].z);
        } else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z + 1))].z;
        }
    } else {
        sum += -alpha * value;
    }

    return sum;
}

float CalcDiffusionFromNeighboursCement(float3 pos) {
    float sum = 0.0;
    float value = _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z))].y;
    float alpha = 1.0 / 7.0;

    if (pos.x > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x - 1, pos.y, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x - 1, pos.y, pos.z))].y);
        }
        else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x - 1, pos.y, pos.z))].y;
        }
    }
    else {
        sum += -alpha * value;
    }
    if (pos.x < (float)_Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x + 1, pos.y, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x + 1, pos.y, pos.z))].y);
        }
        else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x + 1, pos.y, pos.z))].y;
        }
    }
    else {
        sum += -alpha * value;
    }
    if (pos.y > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y - 1, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y - 1, pos.z))].y);
        }
        else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y - 1, pos.z))].y;
        }
    } // Note there is no else as the floor is considered to be made of blocks.
    if (pos.y < (float)_Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y + 1, pos.z))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y + 1, pos.z))].y);
        }
        else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y + 1, pos.z))].y;
        }
    }
    else {
        sum += -alpha * value;
    }
    if (pos.z > 0) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z - 1))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z - 1))].y);
        }
        else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z - 1))].y;
        }
    }
    else {
        sum += -alpha * value;
    }
    if (pos.z < (float)_Resolution - 1) {
        if (_PastCellValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z + 1))] == 0) {
            sum += -alpha * (value - _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z + 1))].y);
        }
        else {
            sum += alpha * _PastPheromoneValues[GetIndexGlobal(float3(pos.x, pos.y, pos.z + 1))].y;
        }
    }
    else {
        sum += -alpha * value;
    }

    return sum;
}

void DecayPheromoneValues(uint3 id) {
    for (uint x = 0; x < _IndexStep; x++) {
        for (uint y = 0; y < _IndexStep; y++) {
            for (uint z = 0; z < _IndexStep; z++) {
                if (_PheromoneValues[GetIndexLocal(id, x, y, z)].x > 0)
                    _PheromoneValues[GetIndexLocal(id, x, y, z)].x *= 0.9;
                if (_PheromoneValues[GetIndexLocal(id, x, y, z)].y > 0)
                    _PheromoneValues[GetIndexLocal(id, x, y, z)].y *= 0.9;
                if (_PheromoneValues[GetIndexLocal(id, x, y, z)].z > 0)
                    _PheromoneValues[GetIndexLocal(id, x, y, z)].z *= 0.9;
            }
        }
    }
}

void DecayCementInCells(uint3 id) {
    for (uint x = 0; x < _IndexStep; x++) {
        for (uint y = 0; y < _IndexStep; y++) {
            for (uint z = 0; z < _IndexStep; z++) {
                if (_PastCellValues[GetIndexLocal(id, x, y, z)] > 0)
                    _PheromoneValues[GetIndexLocal(id, x, y, z)].y *= 0.5;
            }
        }
    }
}

void AgentStepThroughTime(uint3 id) {
    float3 positions[1000];
    int counter = 0;

    for (uint x = 0; x < _IndexStep; x++) {
        for (uint y = 0; y < _IndexStep; y++) {
            for (uint z = 0; z < _IndexStep; z++) {
                for (uint i = 0; i < (uint)_PastAgentValues[GetIndexLocal(id, x, y, z)].x; i++) {
                    positions[counter] = TryMakeMove(id, float3(id.x * _IndexStep + x, id.y * _IndexStep + y, id.z * _IndexStep + z), i);
                    counter++;
                }
            }
        }
    }

    for (int i = 0; i < counter; i++) {
        TryPlaceBlock(id, positions[i]);
    }
}

void TrailAgentStepThroughTime(uint3 id) {
    for (uint x = 0; x < _IndexStep; x++) {
        for (uint y = 0; y < _IndexStep; y++) {
            for (uint z = 0; z < _IndexStep; z++) {
                for (uint i = 0; i < (uint)_PastAgentValues[GetIndexLocal(id, x, y, z)].y; i++) {
                    TryMakeMoveTrail(id, float3(id.x * _IndexStep + x, id.y * _IndexStep + y, id.z * _IndexStep + z), i);
                }
            }
        }
    }
}

void DoQueenCells(uint3 id) {
    for (uint x = 0; x < _IndexStep; x++) {
        for (uint y = 0; y < _IndexStep; y++) {
            for (uint z = 0; z < _IndexStep; z++) {
                if (_PastCellValues[GetIndexLocal(id, x, y, z)] == 10) {
                    _PheromoneValues[GetIndexLocal(id, x, y, z)].x = 6400;
                }
            }
        }
    }
}

void DoTrailPheromoneProduction(uint3 id) {
    for (uint x = 0; x < _IndexStep; x++) {
        for (uint y = 0; y < _IndexStep; y++) {
            for (uint z = 0; z < _IndexStep; z++) {
                if (_PastAgentValues[GetIndexLocal(id, x, y, z)].y > 0) {
                    _PheromoneValues[GetIndexLocal(id, x, y, z)].z = 200;
                }
            }
        }
    }
}

void PheromoneStepThroughTime(uint3 id) {
    DecayPheromoneValues(id);

    for (uint x = 0; x < _IndexStep; x++) {
        for (uint y = 0; y < _IndexStep; y++) {
            for (uint z = 0; z < _IndexStep; z++) {
                if (_PastCellValues[GetIndexLocal(id, x, y, z)] == 0) {
                    _PheromoneValues[GetIndexLocal(id, x, y, z)].x += CalcDiffusionFromNeighboursQueen(float3(id.x * _IndexStep + x, id.y * _IndexStep + y, id.z * _IndexStep + z));
                    if (_PheromoneValues[GetIndexLocal(id, x, y, z)].x < 0.001f) _PheromoneValues[GetIndexLocal(id, x, y, z)].x = 0;

                    _PheromoneValues[GetIndexLocal(id, x, y, z)].y += CalcDiffusionFromNeighboursCement(float3(id.x * _IndexStep + x, id.y * _IndexStep + y, id.z * _IndexStep + z));
                    if (_PheromoneValues[GetIndexLocal(id, x, y, z)].y < 0.001f) _PheromoneValues[GetIndexLocal(id, x, y, z)].y = 0;

                    //_PheromoneValues[GetIndexLocal(id, x, y, z)].z += CalcDiffusionFromNeighboursTrail(float3(id.x * _IndexStep + x, id.y * _IndexStep + y, id.z * _IndexStep + z));
                    //if (_PheromoneValues[GetIndexLocal(id, x, y, z)].z < 0.001f) _PheromoneValues[GetIndexLocal(id, x, y, z)].z = 0;
                }
            }
        }
    }

    DecayCementInCells(id);
    DoQueenCells(id);
    //DoTrailPheromoneProduction(id);
}

[numthreads(2, 2, 2)]
void FunctionKernel(uint3 id: SV_DispatchThreadID) {

    if (_Counter > 200) {
        AgentStepThroughTime(id);
    }

    //TrailAgentStepThroughTime(id);
    
    if ((float) _Counter % 5.0 == 0 || _Counter <= 200) {
        PheromoneStepThroughTime(id);
    }

}

